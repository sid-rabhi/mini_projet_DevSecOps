name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: staticwebsite
  APP_CONTAINER_PORT: 80
  APP_EXPOSED_PORT: 80

jobs:
  # 1. Checkout code
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  # 2. SonarQube Scan
  test-sonarqube-connection:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Test connection to SonarQube
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: curl -v $SONAR_HOST_URL

  run-sonarscanner:
    runs-on: ubuntu-latest
    needs: test-sonarqube-connection
    steps:
      - uses: actions/checkout@v4
      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 3. Build Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: run-sonarscanner
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t $APP_NAME .
          docker tag $APP_NAME ghcr.io/${{ github.repository }}:latest
          docker save ghcr.io/${{ github.repository }}:latest > image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: image-tar
          path: image.tar

  # 4. Trivy scan
  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tar
      - name: Install Trivy
        run: |
          curl -sfL -o trivy.tar.gz https://github.com/aquasecurity/trivy/releases/download/v0.45.0/trivy_0.45.0_Linux-64bit.tar.gz
          tar xz -C /usr/local/bin -f trivy.tar.gz
          trivy --version
      - name: Run Trivy Scan
        run: |
          docker load < image.tar
          trivy image --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy-report.json ghcr.io/${{ github.repository }}:latest || echo "Trivy found issues"
        continue-on-error: true
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  # 5. Acceptance test
  acceptance-test:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tar
      - name: Run container and test
        run: |
          docker load < image.tar
          docker run -d -p $APP_EXPOSED_PORT:$APP_CONTAINER_PORT --name webapp ghcr.io/${{ github.repository }}:latest
          sleep 5
          curl http://localhost:$APP_EXPOSED_PORT | grep -i "Dimension"

  # 6. Push to GHCR
  release-image:
    runs-on: ubuntu-latest
    needs: acceptance-test
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tar
      - name: Log in to GHCR
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push Docker image
        run: |
          docker load < image.tar
          docker push ghcr.io/${{ github.repository }}:latest

  # 7. Deploy to EC2 via SSH
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: release-image
    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            export GHCR_USER=${{ secrets.GHCR_USER }}
            export GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}
            IMAGE="ghcr.io/${{ github.repository }}:latest"
            CONTAINER_NAME="webapp"
            echo $GHCR_TOKEN | docker login ghcr.io -u $GHCR_USER --password-stdin
            docker pull $IMAGE
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d --name $CONTAINER_NAME -p 80:80 $IMAGE
          EOF
