name: CI Pipeline

on:
  push:
    branches:
      - "main"
  pull_request:

env:
  APP_NAME: staticwebsite
  APP_CONTAINER_PORT: 80
  APP_EXPOSED_PORT: 80

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t $APP_NAME .
          docker save $APP_NAME > $APP_NAME.tar

      - uses: actions/upload-artifact@v4
        with:
          name: staticwebsite-tar
          path: staticwebsite.tar

  acceptance-test:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: staticwebsite-tar

      - name: Load Docker image and run container
        run: |
          docker load < staticwebsite.tar
          docker run -d -p $APP_EXPOSED_PORT:$APP_CONTAINER_PORT --env PORT=$APP_CONTAINER_PORT --name webapp $APP_NAME
          sleep 5
          curl http://localhost:$APP_CONTAINER_PORT | grep -i "Dimension"

  trivy-scan:
    runs-on: ubuntu-latest
    needs: acceptance-test
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: staticwebsite-tar

      - name: Install Trivy
        run: |
          echo "Downloading Trivy..."

          # Retry logic for downloading Trivy tarball
          for i in {1..3}; do
            curl -sfL -o /tmp/trivy.tar.gz https://github.com/aquasecurity/trivy/releases/download/v0.26.0/trivy_0.26.0_Linux-x86_64.tar.gz && break
            echo "Retrying download... attempt $i"
            sleep 5
          done

          # Check if the file was downloaded successfully
          if [ ! -f /tmp/trivy.tar.gz ]; then
            echo "Error: Trivy tarball was not downloaded correctly."
            exit 1
          fi

          # Extract the file
          echo "Extracting Trivy..."
          tar xz -C /usr/local/bin -f /tmp/trivy.tar.gz

          # Verify installation
          echo "Verifying Trivy installation..."
          trivy --version

      - name: Scan Docker image with Trivy
        run: |
          docker load < staticwebsite.tar
          trivy image --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy-report.json $APP_NAME
        continue-on-error: false  # This will cause the job to fail if high/critical vulnerabilities are found

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  release-image:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: staticwebsite-tar

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and Push Docker image
        run: |
          docker load < staticwebsite.tar
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker tag $APP_NAME ghcr.io/$REPO_LOWERCASE:$GITHUB_SHA
          docker push ghcr.io/$REPO_LOWERCASE:$GITHUB_SHA
