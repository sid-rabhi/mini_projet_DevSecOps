name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up QEMU for cross-platform builds (if needed)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t $APP_NAME .

      # Save Docker image to tar file
      - name: Save Docker image as tar
        run: |
          docker save $APP_NAME > staticwebsite.tar
        # Upload the tar file for future jobs
        artifacts:
          paths:
            - staticwebsite.tar

  release-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Download the previously built Docker image
      - uses: actions/download-artifact@v4
        with:
          name: app-tar

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Install Trivy for vulnerability scanning
      - name: Install Trivy
        run: |
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.26.0/trivy_0.26.0_Linux-x86_64.tar.gz | tar xz -C /usr/local/bin

      # Scan Docker image for vulnerabilities with Trivy
      - name: Scan Docker image with Trivy
        run: |
          docker load < staticwebsite.tar
          trivy image --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy-report.json $APP_NAME
        continue-on-error: false  # Fail the job if high/critical vulnerabilities are found

      # Upload Trivy Report
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      # Tag and Push Docker image to GitHub Container Registry
      - name: Tag and Push Docker image
        run: |
          docker load < staticwebsite.tar
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker tag $APP_NAME ghcr.io/$REPO_LOWERCASE:$GITHUB_SHA
          docker push ghcr.io/$REPO_LOWERCASE:$GITHUB_SHA
